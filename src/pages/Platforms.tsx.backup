import { useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { Label } from "@/components/ui/label";
import { 
  Monitor, 
  Plus, 
  Search, 
  ExternalLink, 
  MoreVertical,
  Edit,
  Trash2,
  Star,
  StarOff,
  FileText
} from "lucide-react";
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from "@/components/ui/dropdown-menu";

// Mock data for platforms
const mockPlatforms = [
  {
    id: "1",
    name: "HackerOne",
    platformUrl: "https://hackerone.com",
    description: "Leading bug bounty platform with comprehensive program management and researcher community.",
    logoUrl: null,
    popularityRank: 1,
    reportTemplate: "## HackerOne Report Template\n\n### Summary\n[Brief description]\n\n### Steps to Reproduce\n1. Step 1\n2. Step 2\n\n### Impact\n[Describe the impact]\n\n### Proof of Concept\n[Include screenshots/videos]",
    programCount: 15,
    createdAt: "2024-01-15",
    updatedAt: "2024-03-20"
  },
  {
    id: "2", 
    name: "Bugcrowd",
    platformUrl: "https://bugcrowd.com",
    description: "Crowdsourced cybersecurity platform connecting organizations with security researchers worldwide.",
    logoUrl: null,
    popularityRank: 2,
    reportTemplate: "## Bugcrowd Report Template\n\n### Title\n[Vulnerability Title]\n\n### Description\n[Detailed description]\n\n### Steps to Reproduce\n[Step-by-step instructions]\n\n### Expected vs Actual Results\n[What should happen vs what actually happens]\n\n### Impact\n[Security impact assessment]",
    programCount: 8,
    createdAt: "2024-02-01",
    updatedAt: "2024-03-15"
  },
  {
    id: "3",
    name: "Synack",
    platformUrl: "https://synack.com",
    description: "Invitation-only crowdsourced security platform with vetted researchers and enterprise focus.",
    logoUrl: null,
    popularityRank: 3,
    reportTemplate: "## Synack Report Template\n\n### Vulnerability Summary\n[High-level summary]\n\n### Technical Details\n[Technical analysis]\n\n### Reproduction Steps\n[Detailed steps]\n\n### Business Impact\n[Impact on business operations]\n\n### Remediation\n[Suggested fixes]",
    programCount: 4,
    createdAt: "2024-02-15",
    updatedAt: "2024-03-10"
  },
  {
    id: "4",
    name: "Intigriti",
    platformUrl: "https://intigriti.com",
    description: "European bug bounty platform focusing on ethical hacking and security research community.",
    logoUrl: null,
    popularityRank: 4,
    reportTemplate: "## Intigriti Report Template\n\n### Executive Summary\n[Brief overview]\n\n### Vulnerability Details\n[Technical details]\n\n### Proof of Concept\n[PoC code/screenshots]\n\n### Risk Assessment\n[Risk rating and justification]\n\n### Recommendations\n[How to fix the issue]",
    programCount: 6,
    createdAt: "2024-03-01",
    updatedAt: "2024-03-25"
  }
];

export default function PlatformsPage() {
  const [searchTerm, setSearchTerm] = useState("");
  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);
  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);
  const [isTemplateDialogOpen, setIsTemplateDialogOpen] = useState(false);
  const [selectedPlatform, setSelectedPlatform] = useState<any>(null);
  const [editingPlatform, setEditingPlatform] = useState<any>(null);
  const [newPlatform, setNewPlatform] = useState({
    name: "",
    platformUrl: "",
    description: "",
    popularityRank: 1,
    reportTemplate: ""
  });

  const filteredPlatforms = mockPlatforms.filter(platform =>
    platform.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
    platform.description.toLowerCase().includes(searchTerm.toLowerCase())
  );

  const handleCreatePlatform = () => {
    console.log("Creating platform:", newPlatform);
    // In real implementation, this would make an API call
    mockPlatforms.push({
      id: (mockPlatforms.length + 1).toString(),
      ...newPlatform,
      logoUrl: null,
      programCount: 0,
      createdAt: new Date().toISOString().split('T')[0],
      updatedAt: new Date().toISOString().split('T')[0]
    });
    setIsCreateDialogOpen(false);
    setNewPlatform({
      name: "",
      platformUrl: "",
      description: "",
      popularityRank: 1,
      reportTemplate: ""
    });
  };

  const handleEditPlatform = (platform: any) => {
    setEditingPlatform({ ...platform });
    setIsEditDialogOpen(true);
  };

  const handleUpdatePlatform = () => {
    console.log("Updating platform:", editingPlatform);
    // In real implementation, this would make an API call
    const index = mockPlatforms.findIndex(p => p.id === editingPlatform.id);
    if (index !== -1) {
      mockPlatforms[index] = {
        ...editingPlatform,
        updatedAt: new Date().toISOString().split('T')[0]
      };
    }
    setIsEditDialogOpen(false);
    setEditingPlatform(null);
  };

  const handleDeletePlatform = (platformId: string) => {
    if (window.confirm('Are you sure you want to delete this platform? This action cannot be undone.')) {
      console.log("Deleting platform:", platformId);
      // In real implementation, this would make an API call
      const index = mockPlatforms.findIndex(p => p.id === platformId);
      if (index !== -1) {
        mockPlatforms.splice(index, 1);
      }
    }
  };

  const renderStars = (rank: number) => {
    return Array.from({ length: 5 }, (_, i) => (
      rank <= i + 1 ? (
        <Star key={i} className="h-4 w-4 fill-yellow-400 text-yellow-400" />
      ) : (
        <StarOff key={i} className="h-4 w-4 text-gray-300" />
      )
    ));
  };

  const handleViewTemplate = (platform: any) => {
    setSelectedPlatform(platform);
    setIsTemplateDialogOpen(true);
  };

  return (
    <div className="flex flex-col space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold">Platforms</h1>
          <p className="text-muted-foreground">
            Manage bug bounty platforms and their report templates
          </p>
        </div>
        
        <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>
          <DialogTrigger asChild>
            <Button>
              <Plus className="mr-2 h-4 w-4" />
              New Platform
            </Button>
          </DialogTrigger>
          <DialogContent className="sm:max-w-[600px]">
            <DialogHeader>
              <DialogTitle>Create New Platform</DialogTitle>
              <DialogDescription>
                Add a new bug bounty platform to track programs and manage report templates.
              </DialogDescription>
            </DialogHeader>
            <div className="grid gap-4 py-4">
              <div className="grid grid-cols-4 items-center gap-4">
                <Label htmlFor="name" className="text-right">
                  Name
                </Label>
                <Input
                  id="name"
                  value={newPlatform.name}
                  onChange={(e) => setNewPlatform({ ...newPlatform, name: e.target.value })}
                  className="col-span-3"
                  placeholder="Platform name (e.g., HackerOne)"
                />
              </div>
              <div className="grid grid-cols-4 items-center gap-4">
                <Label htmlFor="url" className="text-right">
                  URL
                </Label>
                <Input
                  id="url"
                  value={newPlatform.platformUrl}
                  onChange={(e) => setNewPlatform({ ...newPlatform, platformUrl: e.target.value })}
                  className="col-span-3"
                  placeholder="https://platform.com"
                />
              </div>
              <div className="grid grid-cols-4 items-start gap-4">
                <Label htmlFor="description" className="text-right pt-2">
                  Description
                </Label>
                <Textarea
                  id="description"
                  value={newPlatform.description}
                  onChange={(e) => setNewPlatform({ ...newPlatform, description: e.target.value })}
                  className="col-span-3"
                  placeholder="Describe the platform"
                  rows={3}
                />
              </div>
              <div className="grid grid-cols-4 items-center gap-4">
                <Label htmlFor="rank" className="text-right">
                  Popularity Rank
                </Label>
                <Input
                  id="rank"
                  type="number"
                  min="1"
                  max="5"
                  value={newPlatform.popularityRank}
                  onChange={(e) => setNewPlatform({ ...newPlatform, popularityRank: parseInt(e.target.value) || 1 })}
                  className="col-span-3"
                />
              </div>
              <div className="grid grid-cols-4 items-start gap-4">
                <Label htmlFor="template" className="text-right pt-2">
                  Report Template
                </Label>
                <Textarea
                  id="template"
                  value={newPlatform.reportTemplate}
                  onChange={(e) => setNewPlatform({ ...newPlatform, reportTemplate: e.target.value })}
                  className="col-span-3"
                  placeholder="Markdown template for reports"
                  rows={6}
                />
              </div>
            </div>
            <DialogFooter>
              <Button type="submit" onClick={handleCreatePlatform}>
                Create Platform
              </Button>
            </DialogFooter>
          </DialogContent>
        </Dialog>
      </div>

      <div className="flex items-center space-x-4">
        <div className="relative flex-1">
          <Search className="absolute left-2 top-2.5 h-4 w-4 text-muted-foreground" />
          <Input
            placeholder="Search platforms..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="pl-8"
          />
        </div>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {filteredPlatforms.map((platform) => (
          <Card key={platform.id} className="hover:shadow-lg transition-shadow">
            <CardHeader className="pb-3">
              <div className="flex items-start justify-between">
                <div className="flex-1">
                  <div className="flex items-center space-x-2 mb-2">
                    <Monitor className="h-5 w-5 text-muted-foreground" />
                    <CardTitle className="text-lg">{platform.name}</CardTitle>
                  </div>
                  <div className="flex items-center space-x-2">
                    <div className="flex items-center">
                      {renderStars(platform.popularityRank)}
                    </div>
                    <Badge variant="outline">{platform.programCount} programs</Badge>
                  </div>
                </div>
                <DropdownMenu>
                  <DropdownMenuTrigger asChild>
                    <Button variant="ghost" size="sm">
                      <MoreVertical className="h-4 w-4" />
                    </Button>
                  </DropdownMenuTrigger>
                  <DropdownMenuContent align="end">
                    <DropdownMenuItem onClick={() => handleEditPlatform(platform)}>
                      <Edit className="mr-2 h-4 w-4" />
                      Edit
                    </DropdownMenuItem>
                    <DropdownMenuItem onClick={() => handleViewTemplate(platform)}>
                      <FileText className="mr-2 h-4 w-4" />
                      View Template
                    </DropdownMenuItem>
                    <DropdownMenuItem className="text-destructive" onClick={() => handleDeletePlatform(platform.id)}>
                      <Trash2 className="mr-2 h-4 w-4" />
                      Delete
                    </DropdownMenuItem>
                  </DropdownMenuContent>
                </DropdownMenu>
              </div>
            </CardHeader>
            <CardContent>
              <CardDescription className="mb-4">
                {platform.description}
              </CardDescription>
              
              <div className="flex items-center justify-between text-sm text-muted-foreground">
                <span>Added {new Date(platform.createdAt).toLocaleDateString()}</span>
                {platform.platformUrl && (
                  <Button variant="ghost" size="sm" asChild>
                    <a href={platform.platformUrl} target="_blank" rel="noopener noreferrer">
                      <ExternalLink className="h-4 w-4" />
                    </a>
                  </Button>
                )}
              </div>
            </CardContent>
          </Card>
        ))}
      </div>

      {filteredPlatforms.length === 0 && (
        <div className="text-center py-12">
          <Monitor className="mx-auto h-12 w-12 text-muted-foreground mb-4" />
          <h3 className="text-lg font-semibold mb-2">No platforms found</h3>
          <p className="text-muted-foreground mb-4">
            {searchTerm 
              ? "Try adjusting your search criteria." 
              : "Get started by creating your first platform."}
          </p>
          {!searchTerm && (
            <Button onClick={() => setIsCreateDialogOpen(true)}>
              <Plus className="mr-2 h-4 w-4" />
              Create Platform
            </Button>
          )}
        </div>
      )}

      {/* Edit Platform Dialog */}
      <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>
        <DialogContent className="sm:max-w-[600px]">
          <DialogHeader>
            <DialogTitle>Edit Platform</DialogTitle>
            <DialogDescription>
              Update the platform details and report template.
            </DialogDescription>
          </DialogHeader>
          <div className="grid gap-4 py-4">
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="edit-name" className="text-right">
                Name
              </Label>
              <Input
                id="edit-name"
                value={editingPlatform?.name || ""}
                onChange={(e) => setEditingPlatform({ ...editingPlatform, name: e.target.value })}
                className="col-span-3"
                placeholder="Platform name (e.g., HackerOne)"
              />
            </div>
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="edit-url" className="text-right">
                URL
              </Label>
              <Input
                id="edit-url"
                value={editingPlatform?.platformUrl || ""}
                onChange={(e) => setEditingPlatform({ ...editingPlatform, platformUrl: e.target.value })}
                className="col-span-3"
                placeholder="https://platform.com"
              />
            </div>
            <div className="grid grid-cols-4 items-start gap-4">
              <Label htmlFor="edit-description" className="text-right pt-2">
                Description
              </Label>
              <Textarea
                id="edit-description"
                value={editingPlatform?.description || ""}
                onChange={(e) => setEditingPlatform({ ...editingPlatform, description: e.target.value })}
                className="col-span-3"
                placeholder="Describe the platform"
                rows={3}
              />
            </div>
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="edit-rank" className="text-right">
                Popularity Rank
              </Label>
              <Input
                id="edit-rank"
                type="number"
                min="1"
                max="5"
                value={editingPlatform?.popularityRank || 1}
                onChange={(e) => setEditingPlatform({ ...editingPlatform, popularityRank: parseInt(e.target.value) || 1 })}
                className="col-span-3"
              />
            </div>
            <div className="grid grid-cols-4 items-start gap-4">
              <Label htmlFor="edit-template" className="text-right pt-2">
                Report Template
              </Label>
              <Textarea
                id="edit-template"
                value={editingPlatform?.reportTemplate || ""}
                onChange={(e) => setEditingPlatform({ ...editingPlatform, reportTemplate: e.target.value })}
                className="col-span-3"
                placeholder="Markdown template for reports"
                rows={6}
              />
            </div>
          </div>
          <DialogFooter>
            <Button variant="outline" onClick={() => setIsEditDialogOpen(false)}>
              Cancel
            </Button>
            <Button type="submit" onClick={handleUpdatePlatform}>
              Update Platform
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* Report Template Viewer Dialog */}
      <Dialog open={isTemplateDialogOpen} onOpenChange={setIsTemplateDialogOpen}>
        <DialogContent className="sm:max-w-[700px]">
          <DialogHeader>
            <DialogTitle>{selectedPlatform?.name} Report Template</DialogTitle>
            <DialogDescription>
              Custom report template for {selectedPlatform?.name} submissions
            </DialogDescription>
          </DialogHeader>
          <div className="py-4">
            <pre className="bg-muted p-4 rounded-lg text-sm whitespace-pre-wrap overflow-auto max-h-96">
              {selectedPlatform?.reportTemplate || "No template defined"}
            </pre>
          </div>
          <DialogFooter>
            <Button onClick={() => setIsTemplateDialogOpen(false)}>
              Close
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  );
}
