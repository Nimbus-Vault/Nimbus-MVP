import { useState } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Label } from "@/components/ui/label";
import { 
  ArrowLeft, 
  Shield, 
  Plus, 
  Search, 
  MoreVertical,
  Edit,
  Trash2,
  Eye,
  Book,
  AlertTriangle,
  XCircle,
  AlertCircle,
  Info,
  User,
  Calendar
} from "lucide-react";
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from "@/components/ui/dropdown-menu";
import { AttackNoteSpace } from "@/components/ui/attack-note-space";
import { VulnerabilitySeverity } from "@/types";

// Mock vulnerability class data
const mockVulnClass = {
  id: "1",
  workspaceId: "ws-1",
  name: "SQL Injection",
  severity: VulnerabilitySeverity.Critical,
  description: "SQL injection vulnerabilities occur when user input is directly concatenated into SQL queries without proper validation or escaping. This can allow attackers to manipulate database queries and potentially extract, modify, or delete data.",
  requiredTechnologies: ["MySQL", "PHP", "PostgreSQL", "Node.js"],
  createdBy: "john.doe@example.com",
  createdAt: "2024-01-15T00:00:00Z"
};

// Mock methodologies for this vulnerability class
const mockMethodologies = [
  {
    id: "1",
    name: "Manual SQL Injection Testing",
    description: "Comprehensive manual approach to identifying SQL injection vulnerabilities through systematic testing of input fields and parameters.",
    contentMd: "# Manual SQL Injection Testing\n\n## Overview\nThis methodology covers systematic manual testing approaches for identifying SQL injection vulnerabilities.\n\n## Testing Steps\n1. **Input Point Identification**\n2. **Error-based Testing**\n3. **Boolean-based Testing**\n4. **Time-based Testing**\n5. **Union-based Testing**",
    assignedTechnologies: ["MySQL", "PHP"],
    assignedBehaviors: ["Dynamic Query Building", "User Input Handling"],
    createdBy: "john.doe@example.com",
    createdAt: "2024-01-16",
    lastUpdated: "2024-03-10"
  },
  {
    id: "2", 
    name: "Automated SQLi Discovery",
    description: "Automated tools and techniques for discovering SQL injection vulnerabilities at scale.",
    contentMd: "# Automated SQLi Discovery\n\n## Tools Overview\n- SQLMap\n- Burp Suite Scanner\n- OWASP ZAP\n- Custom Scripts\n\n## Methodology\n1. **Crawling & Discovery**\n2. **Parameter Extraction**\n3. **Payload Testing**\n4. **Verification**",
    assignedTechnologies: ["PostgreSQL", "Node.js"],
    assignedBehaviors: ["Parameter Handling", "Database Interactions"],
    createdBy: "jane.smith@example.com",
    createdAt: "2024-02-01",
    lastUpdated: "2024-03-08"
  }
];

const severityColors = {
  [VulnerabilitySeverity.Critical]: "text-red-700 bg-red-100 border-red-200",
  [VulnerabilitySeverity.High]: "text-orange-700 bg-orange-100 border-orange-200",
  [VulnerabilitySeverity.Medium]: "text-amber-700 bg-amber-100 border-amber-200",
  [VulnerabilitySeverity.Low]: "text-green-700 bg-green-100 border-green-200"
};

const severityIcons = {
  [VulnerabilitySeverity.Critical]: XCircle,
  [VulnerabilitySeverity.High]: AlertTriangle,
  [VulnerabilitySeverity.Medium]: AlertCircle,
  [VulnerabilitySeverity.Low]: Info
};

export default function VulnerabilityClassDetailPage() {
  const { id } = useParams<{ id: string }>();
  const navigate = useNavigate();
  const [vulnClass] = useState(mockVulnClass);
  const [methodologies] = useState(mockMethodologies);
  const [searchTerm, setSearchTerm] = useState("");
  const [isCreateMethodologyDialogOpen, setIsCreateMethodologyDialogOpen] = useState(false);
  const [selectedMethodology, setSelectedMethodology] = useState<any>(null);
  const [newMethodology, setNewMethodology] = useState({
    name: "",
    description: "",
    contentMd: ""
  });

  const handleBackToVulnerabilities = () => {
    navigate('/app/vulnerability-classes');
  };

  const filteredMethodologies = methodologies.filter(methodology =>
    methodology.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
    methodology.description.toLowerCase().includes(searchTerm.toLowerCase())
  );

  const handleCreateMethodology = () => {
    console.log("Creating methodology:", newMethodology);
    setIsCreateMethodologyDialogOpen(false);
    setNewMethodology({
      name: "",
      description: "",
      contentMd: ""
    });
  };

  const handleOpenMethodologyNoteSpace = (methodology: any) => {
    setSelectedMethodology(methodology);
  };

  const handleSaveMethodology = (updatedMethodology: any) => {
    console.log("Saving methodology:", updatedMethodology);
    // Here you would update the methodology in the backend
  };

  const SeverityIcon = severityIcons[vulnClass.severity];

  return (
    <div className="flex flex-col space-y-6">
      {/* Header */}
      <div className="flex items-center gap-4">
        <Button variant="ghost" onClick={handleBackToVulnerabilities}>
          <ArrowLeft className="mr-2 h-4 w-4" />
          Back to Vulnerability Classes
        </Button>
      </div>

      {/* Vulnerability Class Details */}
      <Card>
        <CardHeader>
          <div className="flex items-start justify-between">
            <div className="flex-1">
              <div className="flex items-center space-x-2 mb-2">
                <Shield className="h-6 w-6 text-muted-foreground" />
                <CardTitle className="text-2xl">{vulnClass.name}</CardTitle>
              </div>
              <div className="flex items-center space-x-2 mb-4">
                <SeverityIcon className="h-5 w-5" />
                <Badge variant="outline" className={severityColors[vulnClass.severity]}>
                  {vulnClass.severity}
                </Badge>
                <span className="text-sm text-muted-foreground">
                  Created {new Date(vulnClass.createdAt).toLocaleDateString()}
                </span>
              </div>
              <CardDescription className="max-w-3xl">
                {vulnClass.description}
              </CardDescription>
            </div>
            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <Button variant="ghost" size="sm">
                  <MoreVertical className="h-4 w-4" />
                </Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent align="end">
                <DropdownMenuItem>
                  <Edit className="mr-2 h-4 w-4" />
                  Edit Details
                </DropdownMenuItem>
                <DropdownMenuItem className="text-destructive">
                  <Trash2 className="mr-2 h-4 w-4" />
                  Delete
                </DropdownMenuItem>
              </DropdownMenuContent>
            </DropdownMenu>
          </div>
        </CardHeader>
        <CardContent>
          {vulnClass.requiredTechnologies && vulnClass.requiredTechnologies.length > 0 && (
            <div className="mb-4">
              <h4 className="font-medium mb-2">Required Technologies</h4>
              <div className="flex flex-wrap gap-2">
                {vulnClass.requiredTechnologies.map((tech, index) => (
                  <Badge key={index} variant="secondary">{tech}</Badge>
                ))}
              </div>
            </div>
          )}
          <div className="flex items-center justify-between text-sm text-muted-foreground">
            <div className="flex items-center space-x-1">
              <User className="h-4 w-4" />
              <span>{vulnClass.createdBy}</span>
            </div>
            <div className="flex items-center space-x-1">
              <Calendar className="h-4 w-4" />
              <span>{new Date(vulnClass.createdAt).toLocaleDateString()}</span>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Methodologies Section */}
      <div className="space-y-4">
        <div className="flex items-center justify-between">
          <div>
            <h2 className="text-2xl font-bold">Methodologies</h2>
            <p className="text-muted-foreground">
              Testing approaches and methodologies for this vulnerability class
            </p>
          </div>
          
          <Dialog open={isCreateMethodologyDialogOpen} onOpenChange={setIsCreateMethodologyDialogOpen}>
            <DialogTrigger asChild>
              <Button>
                <Plus className="mr-2 h-4 w-4" />
                New Methodology
              </Button>
            </DialogTrigger>
            <DialogContent className="sm:max-w-[600px]">
              <DialogHeader>
                <DialogTitle>Create New Methodology</DialogTitle>
                <DialogDescription>
                  Define a new testing methodology for {vulnClass.name}.
                </DialogDescription>
              </DialogHeader>
              <div className="grid gap-4 py-4">
                <div className="grid grid-cols-4 items-center gap-4">
                  <Label htmlFor="name" className="text-right">
                    Name
                  </Label>
                  <Input
                    id="name"
                    value={newMethodology.name}
                    onChange={(e) => setNewMethodology({ ...newMethodology, name: e.target.value })}
                    className="col-span-3"
                    placeholder="Methodology name"
                  />
                </div>
                <div className="grid grid-cols-4 items-start gap-4">
                  <Label htmlFor="description" className="text-right pt-2">
                    Description
                  </Label>
                  <Textarea
                    id="description"
                    value={newMethodology.description}
                    onChange={(e) => setNewMethodology({ ...newMethodology, description: e.target.value })}
                    className="col-span-3"
                    placeholder="Brief description of the methodology"
                    rows={3}
                  />
                </div>
                <div className="grid grid-cols-4 items-start gap-4">
                  <Label htmlFor="content" className="text-right pt-2">
                    Content
                  </Label>
                  <Textarea
                    id="content"
                    value={newMethodology.contentMd}
                    onChange={(e) => setNewMethodology({ ...newMethodology, contentMd: e.target.value })}
                    className="col-span-3"
                    placeholder="Detailed methodology content (Markdown supported)"
                    rows={6}
                  />
                </div>
              </div>
              <DialogFooter>
                <Button type="submit" onClick={handleCreateMethodology}>
                  Create Methodology
                </Button>
              </DialogFooter>
            </DialogContent>
          </Dialog>
        </div>

        <div className="flex items-center space-x-4">
          <div className="relative flex-1">
            <Search className="absolute left-2 top-2.5 h-4 w-4 text-muted-foreground" />
            <Input
              placeholder="Search methodologies..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="pl-8"
            />
          </div>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          {filteredMethodologies.map((methodology) => (
            <Card key={methodology.id} className="hover:shadow-lg transition-shadow">
              <CardHeader className="pb-3">
                <div className="flex items-start justify-between">
                  <div className="flex-1">
                    <div className="flex items-center space-x-2 mb-2">
                      <Book className="h-5 w-5 text-muted-foreground" />
                      <CardTitle className="text-lg">{methodology.name}</CardTitle>
                    </div>
                  </div>
                  <DropdownMenu>
                    <DropdownMenuTrigger asChild>
                      <Button variant="ghost" size="sm">
                        <MoreVertical className="h-4 w-4" />
                      </Button>
                    </DropdownMenuTrigger>
                    <DropdownMenuContent align="end">
                      <DropdownMenuItem onClick={() => handleOpenMethodologyNoteSpace(methodology)}>
                        <Eye className="mr-2 h-4 w-4" />
                        Open Note Space
                      </DropdownMenuItem>
                      <DropdownMenuItem>
                        <Edit className="mr-2 h-4 w-4" />
                        Edit
                      </DropdownMenuItem>
                      <DropdownMenuItem className="text-destructive">
                        <Trash2 className="mr-2 h-4 w-4" />
                        Delete
                      </DropdownMenuItem>
                    </DropdownMenuContent>
                  </DropdownMenu>
                </div>
              </CardHeader>
              <CardContent>
                <CardDescription className="mb-4">
                  {methodology.description}
                </CardDescription>
                
                <div className="space-y-2 mb-4">
                  {methodology.assignedTechnologies && methodology.assignedTechnologies.length > 0 && (
                    <div>
                      <span className="text-sm font-medium text-muted-foreground">Technologies:</span>
                      <div className="flex flex-wrap gap-1 mt-1">
                        {methodology.assignedTechnologies.map((tech, index) => (
                          <Badge key={index} variant="outline" className="text-xs">{tech}</Badge>
                        ))}
                      </div>
                    </div>
                  )}
                  {methodology.assignedBehaviors && methodology.assignedBehaviors.length > 0 && (
                    <div>
                      <span className="text-sm font-medium text-muted-foreground">Behaviors:</span>
                      <div className="flex flex-wrap gap-1 mt-1">
                        {methodology.assignedBehaviors.map((behavior, index) => (
                          <Badge key={index} variant="secondary" className="text-xs">{behavior}</Badge>
                        ))}
                      </div>
                    </div>
                  )}
                </div>

                <div className="flex items-center justify-between text-xs text-muted-foreground">
                  <div className="flex items-center space-x-1">
                    <User className="h-3 w-3" />
                    <span>{methodology.createdBy}</span>
                  </div>
                  <span>Updated {new Date(methodology.lastUpdated).toLocaleDateString()}</span>
                </div>
              </CardContent>
            </Card>
          ))}
        </div>

        {filteredMethodologies.length === 0 && (
          <div className="text-center py-12">
            <Book className="mx-auto h-12 w-12 text-muted-foreground mb-4" />
            <h3 className="text-lg font-semibold mb-2">No methodologies found</h3>
            <p className="text-muted-foreground mb-4">
              {searchTerm 
                ? "Try adjusting your search criteria." 
                : "Get started by creating your first methodology for this vulnerability class."}
            </p>
            {!searchTerm && (
              <Button onClick={() => setIsCreateMethodologyDialogOpen(true)}>
                <Plus className="mr-2 h-4 w-4" />
                Create Methodology
              </Button>
            )}
          </div>
        )}
      </div>

      {/* Methodology Note Space */}
      {selectedMethodology && (
        <AttackNoteSpace
          entity={selectedMethodology}
          entityType="methodology"
          onSave={handleSaveMethodology}
          onClose={() => setSelectedMethodology(null)}
          showLeftSidebar={true}
          showRightSidebar={true}
          leftSidebarTitle="Technologies"
          rightSidebarTitle="Behaviors"
          leftSidebarContent={
            <div className="space-y-4">
              <div>
                <h4 className="font-medium text-sm mb-2">Assigned Technologies</h4>
                <div className="space-y-2">
                  <Button variant="outline" size="sm" className="w-full justify-start">
                    <Plus className="h-3 w-3 mr-2" />
                    Add Technology
                  </Button>
                  <div className="space-y-1">
                    {selectedMethodology.assignedTechnologies?.map((tech: string, index: number) => (
                      <Badge key={index} variant="secondary" className="text-xs block w-fit">{tech}</Badge>
                    ))}
                  </div>
                </div>
              </div>
            </div>
          }
          rightSidebarContent={
            <div className="space-y-4">
              <div>
                <h4 className="font-medium text-sm mb-2">Assigned Behaviors</h4>
                <div className="space-y-2">
                  <Button variant="outline" size="sm" className="w-full justify-start">
                    <Plus className="h-3 w-3 mr-2" />
                    Add Behavior
                  </Button>
                  <div className="space-y-1">
                    {selectedMethodology.assignedBehaviors?.map((behavior: string, index: number) => (
                      <Badge key={index} variant="outline" className="text-xs block w-fit">{behavior}</Badge>
                    ))}
                  </div>
                </div>
              </div>
            </div>
          }
        />
      )}
    </div>
  );
}
