import { supabase, formatError } from '../supabase';
import { VulnClass, VulnerabilitySeverity } from '@/types';

// Vulnerability Management Service
export const vulnerabilityService = {
  async getAll(): Promise<VulnClass[]> {
    const { data, error } = await supabase.from('vuln_class').select('*');

    if (error) {
      throw new Error(formatError(error));
    }

    return data.map(vuln => ({
      id: vuln.id,
      workspaceId: vuln.workspace_id,
      name: vuln.name,
      severity: vuln.severity as VulnerabilitySeverity,
      description: vuln.description,
      createdBy: vuln.created_by,
      createdAt: vuln.created_at
    }));
  },

  async getById(id: string): Promise<VulnClass | null> {
    const { data, error } = await supabase
      .from('vuln_class')
      .select('*')
      .eq('id', id)
      .single();

    if (error) {
      if (error.code === 'PGRST116') {
        return null;
      }
      throw new Error(formatError(error));
    }

    return {
      id: data.id,
      workspaceId: data.workspace_id,
      name: data.name,
      severity: data.severity as VulnerabilitySeverity,
      description: data.description,
      createdBy: data.created_by,
      createdAt: data.created_at
    };
  },

  async getByWorkspace(workspaceId: string): Promise<VulnClass[]> {
    const { data, error } = await supabase
      .from('vuln_class')
      .select('*')
      .eq('workspace_id', workspaceId);

    if (error) {
      throw new Error(formatError(error));
    }

    return data.map(vuln => ({
      id: vuln.id,
      workspaceId: vuln.workspace_id,
      name: vuln.name,
      severity: vuln.severity as VulnerabilitySeverity,
      description: vuln.description,
      createdBy: vuln.created_by,
      createdAt: vuln.created_at
    }));
  },

  async create(vulnerability: Omit<VulnClass, 'id' | 'createdAt'>): Promise<VulnClass> {
    const { data, error } = await supabase
      .from('vuln_class')
      .insert({
        workspace_id: vulnerability.workspaceId,
        name: vulnerability.name,
        severity: vulnerability.severity,
        description: vulnerability.description,
        created_by: vulnerability.createdBy
      })
      .select()
      .single();

    if (error) {
      throw new Error(formatError(error));
    }

    return {
      id: data.id,
      workspaceId: data.workspace_id,
      name: data.name,
      severity: data.severity as VulnerabilitySeverity,
      description: data.description,
      createdBy: data.created_by,
      createdAt: data.created_at
    };
  },

  async update(id: string, vulnerability: Partial<VulnClass>): Promise<VulnClass> {
    const { data, error } = await supabase
      .from('vuln_class')
      .update({
        name: vulnerability.name,
        severity: vulnerability.severity,
        description: vulnerability.description
      })
      .eq('id', id)
      .select()
      .single();

    if (error) {
      throw new Error(formatError(error));
    }

    return {
      id: data.id,
      workspaceId: data.workspace_id,
      name: data.name,
      severity: data.severity as VulnerabilitySeverity,
      description: data.description,
      createdBy: data.created_by,
      createdAt: data.created_at
    };
  },

  async delete(id: string): Promise<boolean> {
    const { error } = await supabase.from('vuln_class').delete().eq('id', id);

    if (error) {
      throw new Error(formatError(error));
    }

    return true;
  }
};